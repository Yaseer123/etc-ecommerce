// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum UserRole {
    USER
    ADMIN
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
}

model Post {
    id        String   @id @default(cuid())
    title     String
    slug      String
    content   String
    imageId   String   @unique
    tags      String[]
    published Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([slug, createdAt])
}

model Product {
    id                 String    @id @default(cuid())
    title              String
    new                Boolean   @default(true)
    sale               Boolean   @default(false)
    rate               Float     @default(0)
    slug               String
    shortDescription   String
    description        String?
    price              Float
    originPrice        Float
    stock              Int
    brand              String
    sold               Int       @default(0)
    categoryId         String? // Foreign key to Category
    category           Category? @relation("CategoryToProduct", fields: [categoryId], references: [id], onDelete: SetNull)
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    imageId            String
    descriptionImageId String?

    reviews   Review[]
    orders    OrderItem[]
    CartItem  CartItem[]
    questions Question[]
    wishlists WishList[]
}

model WishList {
    id        String   @id @default(cuid())
    userId    String
    productId String
    createdAt DateTime @default(now())

    // Relationships
    user    User    @relation(fields: [userId], references: [id])
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Question {
    id        String   @id @default(cuid())
    userId    String
    productId String
    question  String
    answer    String?
    createdAt DateTime @default(now())

    // Relationships
    user    User    @relation(fields: [userId], references: [id])
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
    id        String   @id @default(cuid())
    userId    String
    productId String
    rating    Int // Rating out of 5
    comment   String?
    createdAt DateTime @default(now())

    // Relationships
    user    User    @relation(fields: [userId], references: [id])
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
    id            String     @id @default(cuid())
    name          String
    parentId      String?
    parent        Category?  @relation("CategoryToParent", fields: [parentId], references: [id], onDelete: Cascade) // Cascade deletion
    subcategories Category[] @relation("CategoryToParent")
    products      Product[]  @relation("CategoryToProduct") // Optional: Cascade delete products if needed
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          UserRole  @default(USER)

    accounts  Account[]
    posts     Post[]
    address   Address?
    orders    Order[]
    reviews   Review[]
    cart      Cart?
    questions Question[]
    WishList  WishList[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Address {
    id        String  @id @default(cuid())
    userId    String  @unique
    street    String
    city      String
    state     String
    zipCode   String
    country   String
    isDefault Boolean @default(false)

    // Relationships
    user  User    @relation(fields: [userId], references: [id])
    Order Order[]
}

model Cart {
    id        String     @id @default(cuid())
    userId    String     @unique
    items     CartItem[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt

    // Relationships
    user User @relation(fields: [userId], references: [id])
}

model CartItem {
    id        String   @id @default(cuid())
    cartId    String
    productId String
    quantity  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relationships
    cart    Cart    @relation(fields: [cartId], references: [id])
    product Product @relation(fields: [productId], references: [id])
}

model Order {
    id        String      @id @default(cuid())
    userId    String
    status    OrderStatus @default(PENDING)
    total     Float
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt

    // Relationships
    user      User        @relation(fields: [userId], references: [id])
    items     OrderItem[]
    address   Address?    @relation(fields: [addressId], references: [id])
    addressId String?
}

model OrderItem {
    id        String   @id @default(cuid())
    orderId   String
    productId String
    quantity  Int
    price     Float // Price at the time of purchase
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relationships
    order   Order   @relation(fields: [orderId], references: [id])
    product Product @relation(fields: [productId], references: [id])
}
